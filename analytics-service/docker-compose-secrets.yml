# Docker Compose with Secrets Support
# Usage: docker-compose -f docker-compose-secrets.yml up -d

version: '3.8'

services:
  # Analytics Service with secrets
  analytics-service:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: crm-analytics-secure
    ports:
      - "8005:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      # Database connection using secrets
      - DATABASE_HOST=postgres-analytics-secure
      - DATABASE_PORT=5432
      - DATABASE_NAME=salesforce_clone
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD_FILE=/run/secrets/postgres_password
      # Redis
      - REDIS_HOST=redis-analytics-secure
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      # ClickHouse
      - CLICKHOUSE_HOST=clickhouse-analytics-secure
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_DATABASE=crm_analytics
      - CLICKHOUSE_USER=analytics
      - CLICKHOUSE_PASSWORD_FILE=/run/secrets/clickhouse_password
      # JWT
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - SESSION_SECRET_FILE=/run/secrets/session_secret
      # Logging
      - LOG_LEVEL=INFO
      - LOG_DIR=/app/logs
    secrets:
      - postgres_password
      - redis_password
      - clickhouse_password
      - jwt_secret
      - session_secret
    networks:
      - analytics-network
    volumes:
      - analytics-logs:/app/logs
    depends_on:
      - postgres-analytics-secure
      - redis-analytics-secure
      - clickhouse-analytics-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML/AI Service with secrets
  ml-ai-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: crm-ml-ai-secure
    ports:
      - "8007:8007"
    environment:
      - CLICKHOUSE_HOST=clickhouse-analytics-secure
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_USER=analytics
      - CLICKHOUSE_PASSWORD_FILE=/run/secrets/clickhouse_password
      - CLICKHOUSE_DATABASE=crm_analytics
      # External API keys (if available)
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - AZURE_API_KEY_FILE=/run/secrets/azure_api_key
    secrets:
      - clickhouse_password
      - source: openai_api_key
        target: openai_api_key
        mode: 0400
      - source: azure_api_key
        target: azure_api_key
        mode: 0400
    networks:
      - analytics-network
    depends_on:
      - clickhouse-analytics-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # PostgreSQL with secrets
  postgres-analytics-secure:
    image: postgres:13
    container_name: analytics-postgres-secure
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=salesforce_clone
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    secrets:
      - postgres_password
    volumes:
      - postgres-analytics-data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d salesforce_clone"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse with secrets
  clickhouse-analytics-secure:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: crm-clickhouse-secure
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=crm_analytics
      - CLICKHOUSE_USER=analytics
      - CLICKHOUSE_PASSWORD_FILE=/run/secrets/clickhouse_password
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    secrets:
      - clickhouse_password
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-logs:/var/log/clickhouse-server
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 60s

  # Redis with authentication
  redis-analytics-secure:
    image: redis:7-alpine
    container_name: crm-redis-analytics-secure
    ports:
      - "6380:6379"
    command: >
      sh -c "
        export REDIS_PASSWORD=$$(cat /run/secrets/redis_password) &&
        exec redis-server --requirepass $$REDIS_PASSWORD --appendonly yes
      "
    secrets:
      - redis_password
    volumes:
      - redis-data:/data
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Grafana with secure admin password
  grafana-analytics-secure:
    image: grafana/grafana-oss:latest
    container_name: crm-grafana-secure
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_INSTALL_PLUGINS=clickhouse-datasource
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3001/
    secrets:
      - grafana_admin_password
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Superset with secret key
  superset-analytics-secure:
    image: apache/superset:latest
    container_name: crm-superset-secure
    ports:
      - "8006:8088"
    environment:
      - SUPERSET_SECRET_KEY_FILE=/run/secrets/superset_secret_key
    secrets:
      - superset_secret_key
    volumes:
      - superset-data:/app/superset_home
    networks:
      - analytics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer with SSL support
  nginx-analytics-secure:
    image: nginx:alpine
    container_name: crm-nginx-analytics-secure
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/load-balancer.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    secrets:
      - source: ssl_certificate
        target: /etc/nginx/ssl/server.crt
        mode: 0444
      - source: ssl_private_key
        target: /etc/nginx/ssl/server.key
        mode: 0400
    networks:
      - analytics-network
    depends_on:
      - analytics-service
      - ml-ai-service
      - grafana-analytics-secure
      - superset-analytics-secure
    restart: unless-stopped

  # Backup Service with secure database access
  backup-service-secure:
    build:
      context: .
      dockerfile: backup-service/Dockerfile
    container_name: crm-backup-service-secure
    environment:
      - POSTGRES_HOST=postgres-analytics-secure
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - CLICKHOUSE_HOST=clickhouse-analytics-secure
      - CLICKHOUSE_USER=analytics
      - CLICKHOUSE_PASSWORD_FILE=/run/secrets/clickhouse_password
    secrets:
      - postgres_password
      - clickhouse_password
    volumes:
      - backup-data:/app/backups
      - backup-logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - analytics-network
    depends_on:
      - postgres-analytics-secure
      - clickhouse-analytics-secure
    restart: unless-stopped

# Docker secrets definition
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  clickhouse_password:
    external: true
  jwt_secret:
    external: true
  session_secret:
    external: true
  grafana_admin_password:
    external: true
  superset_secret_key:
    external: true
  ssl_certificate:
    external: true
  ssl_private_key:
    external: true
  openai_api_key:
    external: true
  azure_api_key:
    external: true

networks:
  analytics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-analytics-data:
    driver: local
  clickhouse-data:
    driver: local
  clickhouse-logs:
    driver: local
  redis-data:
    driver: local
  grafana-data:
    driver: local
  superset-data:
    driver: local
  backup-data:
    driver: local
  backup-logs:
    driver: local
  analytics-logs:
    driver: local
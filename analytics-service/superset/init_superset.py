#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Apache Superset –¥–ª—è CRM Analytics
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞—à–±–æ—Ä–¥—ã
"""

import os
import sys
import json
from superset import app, db
from superset.models.core import Database
from superset.models.dashboard import Dashboard
from superset.models.slice import Slice
from superset.connectors.sqla.models import SqlaTable
from flask_appbuilder.security.sqla.models import User, Role
from superset.security import SupersetSecurityManager

def create_admin_user():
    """–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    print("üîß Creating admin user...")
    
    security_manager = app.appbuilder.sm
    admin_role = security_manager.find_role("Admin")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    admin_user = security_manager.find_user("admin")
    if admin_user:
        print("‚úÖ Admin user already exists")
        return admin_user
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    admin_user = security_manager.add_user(
        username="admin",
        first_name="Admin",
        last_name="CRM",
        email="admin@crm.local",
        role=admin_role,
        password="admin123"
    )
    
    print("‚úÖ Admin user created: admin/admin123")
    return admin_user

def create_database_connections():
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß Creating database connections...")
    
    connections = [
        {
            'database_name': 'CRM ClickHouse',
            'sqlalchemy_uri': 'clickhousedb://analytics:analytics_password@clickhouse-analytics:8123/crm_analytics',
            'extra': json.dumps({
                "metadata_params": {},
                "engine_params": {
                    "connect_args": {
                        "protocol": "http"
                    }
                }
            })
        },
        {
            'database_name': 'CRM PostgreSQL',
            'sqlalchemy_uri': 'postgresql://postgres:password@postgres-analytics-fresh:5432/salesforce_clone',
            'extra': json.dumps({
                "metadata_params": {},
                "engine_params": {}
            })
        }
    ]
    
    created_dbs = []
    
    for conn in connections:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        existing_db = db.session.query(Database).filter_by(
            database_name=conn['database_name']
        ).first()
        
        if existing_db:
            print(f"‚úÖ Database connection '{conn['database_name']}' already exists")
            created_dbs.append(existing_db)
            continue
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        database = Database(
            database_name=conn['database_name'],
            sqlalchemy_uri=conn['sqlalchemy_uri'],
            extra=conn['extra']
        )
        
        db.session.add(database)
        db.session.commit()
        created_dbs.append(database)
        print(f"‚úÖ Created database connection: {conn['database_name']}")
    
    return created_dbs

def create_base_tables():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    print("üîß Creating base tables...")
    
    # –ù–∞–π–¥–µ–º ClickHouse –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    clickhouse_db = db.session.query(Database).filter_by(
        database_name='CRM ClickHouse'
    ).first()
    
    if not clickhouse_db:
        print("‚ùå ClickHouse connection not found")
        return []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    tables_to_create = [
        {
            'table_name': 'deals',
            'schema': 'crm_analytics',
            'database_id': clickhouse_db.id
        },
        {
            'table_name': 'leads', 
            'schema': 'crm_analytics',
            'database_id': clickhouse_db.id
        },
        {
            'table_name': 'activities',
            'schema': 'crm_analytics', 
            'database_id': clickhouse_db.id
        }
    ]
    
    created_tables = []
    
    for table_info in tables_to_create:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        existing_table = db.session.query(SqlaTable).filter_by(
            table_name=table_info['table_name'],
            database_id=table_info['database_id']
        ).first()
        
        if existing_table:
            print(f"‚úÖ Table '{table_info['table_name']}' already exists")
            created_tables.append(existing_table)
            continue
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sqla_table = SqlaTable(
            table_name=table_info['table_name'],
            schema=table_info['schema'],
            database_id=table_info['database_id']
        )
        
        db.session.add(sqla_table)
        db.session.commit()
        created_tables.append(sqla_table)
        print(f"‚úÖ Created table: {table_info['table_name']}")
    
    return created_tables

def create_sample_dashboard():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞"""
    print("üîß Creating sample dashboard...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∞—à–±–æ—Ä–¥
    existing_dashboard = db.session.query(Dashboard).filter_by(
        dashboard_title='CRM Analytics Overview'
    ).first()
    
    if existing_dashboard:
        print("‚úÖ Sample dashboard already exists")
        return existing_dashboard
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    dashboard = Dashboard(
        dashboard_title='CRM Analytics Overview',
        position_json=json.dumps({
            "DASHBOARD_VERSION_KEY": "v2",
            "ROOT_ID": "GRID_ID",
            "GRID_ID": {
                "type": "GRID",
                "id": "GRID_ID", 
                "children": [],
                "parents": ["ROOT_ID"]
            }
        }),
        json_metadata=json.dumps({
            "refresh_frequency": 300,
            "timed_refresh_immune_slices": [],
            "expanded_slices": {},
            "color_scheme": "supersetColors",
            "label_colors": {},
            "shared_label_colors": {},
            "color_scheme_domain": [],
            "cross_filters_enabled": True
        })
    )
    
    db.session.add(dashboard)
    db.session.commit()
    print("‚úÖ Created sample dashboard: CRM Analytics Overview")
    
    return dashboard

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ Initializing Superset for CRM Analytics...")
    
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
            admin_user = create_admin_user()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            databases = create_database_connections()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = create_base_tables()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
            dashboard = create_sample_dashboard()
            
            print("\n‚úÖ Superset initialization completed successfully!")
            print("\nüìä Access Information:")
            print("   URL: http://localhost:8006")
            print("   Username: admin")
            print("   Password: admin123")
            print("\nüíæ Database Connections:")
            for db_conn in databases:
                print(f"   - {db_conn.database_name}")
            print("\nüìà Available Tables:")
            for table in tables:
                print(f"   - {table.schema}.{table.table_name}")
            
        except Exception as e:
            print(f"‚ùå Error during initialization: {e}")
            sys.exit(1)

if __name__ == "__main__":
    main()
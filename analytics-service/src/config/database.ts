import { Pool, PoolConfig } from 'pg';
import { config } from './index';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL
const poolConfig: PoolConfig = {
  host: config.database.host,
  port: config.database.port,
  database: config.database.database,
  user: config.database.username,
  password: config.database.password,
  ssl: config.database.ssl,
  max: config.database.maxConnections,
  idleTimeoutMillis: config.database.idleTimeoutMillis,
  connectionTimeoutMillis: 5000,
  statement_timeout: 30000,
  query_timeout: 30000,
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
export const db = new Pool(poolConfig);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db.on('connect', (client: any) => {
  console.log(`‚úÖ PostgreSQL client connected (PID: ${client.processID || 'unknown'})`);
});

db.on('error', (err) => {
  console.error('‚ùå PostgreSQL pool error:', err);
});

db.on('acquire', (client: any) => {
  if (config.nodeEnv === 'development') {
    console.log(`üîÑ PostgreSQL client acquired (PID: ${client.processID || 'unknown'})`);
  }
});

db.on('remove', (client: any) => {
  if (config.nodeEnv === 'development') {
    console.log(`‚ùå PostgreSQL client removed (PID: ${client.processID || 'unknown'})`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    const client = await db.connect();
    const result = await client.query('SELECT NOW()');
    client.release();
    console.log('‚úÖ Database connection successful:', result.rows[0].now);
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
export async function runMigrations(): Promise<void> {
  const client = await db.connect();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await client.query(`
      CREATE TABLE IF NOT EXISTS schema_migrations (
        version VARCHAR(255) PRIMARY KEY,
        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    console.log('‚úÖ Migrations table ready');
    
  } catch (error) {
    console.error('‚ùå Error setting up migrations:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Graceful shutdown
export async function closeDatabaseConnection(): Promise<void> {
  try {
    await db.end();
    console.log('‚úÖ Database pool closed gracefully');
  } catch (error) {
    console.error('‚ùå Error closing database pool:', error);
  }
}
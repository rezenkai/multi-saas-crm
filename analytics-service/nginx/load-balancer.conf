# Load Balancer Configuration for Production
upstream analytics_backend {
    least_conn;
    server analytics-service_1:8000 weight=1 max_fails=3 fail_timeout=30s;
    server analytics-service_2:8000 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream ml_ai_backend {
    least_conn;
    server ml-ai-service_1:8007 weight=1 max_fails=3 fail_timeout=30s;
    server ml-ai-service_2:8007 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Health check endpoints
upstream grafana_backend {
    server grafana-analytics:3000 weight=1 max_fails=2 fail_timeout=10s;
}

upstream superset_backend {
    server superset-analytics:8088 weight=1 max_fails=2 fail_timeout=10s;
}

server {
    listen 80;
    server_name _;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=ml_limit:10m rate=5r/s;
    
    # Main API routing with load balancing
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://analytics_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Connection pooling
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Health check
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
    }
    
    # ML/AI API routing with load balancing
    location /ml/ {
        limit_req zone=ml_limit burst=10 nodelay;
        
        rewrite ^/ml/(.*)$ /api/ml/$1 break;
        proxy_pass http://ml_ai_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extended timeouts for ML operations
        proxy_connect_timeout 30s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Health check
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
    }
    
    # Grafana with load balancing (if needed)
    location /grafana/ {
        proxy_pass http://grafana_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for Grafana live
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Superset with load balancing (if needed)
    location /superset/ {
        proxy_pass http://superset_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","load_balancer":"nginx","timestamp":"'$time_iso8601'"}';
        add_header Content-Type application/json;
    }
    
    # Root endpoint
    location = / {
        return 200 '{"message": "CRM Analytics Stack", "services": {"analytics": "/api/", "grafana": "/grafana/", "superset": "/superset/", "ml-ai": "/ml/", "health": "/health"}}';
        add_header Content-Type application/json;
    }
    
    # Status page for monitoring
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;  # Docker networks
        deny all;
    }
    
    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        return 502 '{"error":"Service Temporarily Unavailable","message":"Backend services are currently unavailable. Please try again later."}';
        add_header Content-Type application/json;
    }
}

# Logging configuration
log_format detailed '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time" '
                   'upstream="$upstream_addr" cache="$upstream_cache_status"';

access_log /var/log/nginx/access.log detailed;
error_log /var/log/nginx/error.log warn;
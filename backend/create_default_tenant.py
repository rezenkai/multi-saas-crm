"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ tenant –≤ PostgreSQL
"""
import uuid
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.core.config import settings
from app.core.database import Base, engine

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
from app.models import tenant, user, contact, company, opportunity, token

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

def create_default_tenant():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π tenant"""
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π tenant
        existing_tenant = db.query(tenant.Tenant).filter(tenant.Tenant.subdomain == "default").first()
        
        if not existing_tenant:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π tenant
            tenant_id = str(uuid.uuid4()) if settings.DATABASE_URL.startswith("sqlite") else uuid.uuid4()
            default_tenant = tenant.Tenant(
                id=tenant_id,
                name="Default Tenant",
                domain="localhost",
                subdomain="default",
                is_active=True,
                max_users=1000,
                max_storage_gb=100,
                theme="light",
                timezone="UTC",
                locale="en"
            )
            
            db.add(default_tenant)
            db.commit()
            print(f"‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π tenant —Å–æ–∑–¥–∞–Ω: {default_tenant.id}")
        else:
            print(f"‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π tenant —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_tenant.id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ tenant: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    create_tables()
    
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ tenant...")
    create_default_tenant()
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!") 
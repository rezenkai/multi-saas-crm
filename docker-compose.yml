version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: pgvector/pgvector:pg15
    container_name: salesforce_postgres
    environment:
      POSTGRES_DB: salesforce_clone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - salesforce_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: salesforce_redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - salesforce_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch для поиска
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: salesforce_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - salesforce_network
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka для event-driven архитектуры
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: salesforce_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - salesforce_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: salesforce_kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - salesforce_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: salesforce_backend
    ports:
      - '8000:8000'
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/salesforce_clone
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DEBUG=true
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - salesforce_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: salesforce_frontend
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - salesforce_network
    command: npm run dev

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: salesforce_prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - salesforce_network

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: salesforce_grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - salesforce_network

  # Identity Service (NestJS) - Add this to your docker-compose.yml services
  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    container_name: salesforce_identity_service
    ports:
      - '3002:3002' # Changed from 3001 to 3002
    environment:
      - NODE_ENV=production
      - PORT=3002 # Changed from 3001 to 3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=salesforce_clone
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/salesforce_clone
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-for-production
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-for-production
      - JWT_REFRESH_EXPIRES_IN=7d
    volumes:
      - ./identity-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - salesforce_network
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:3002/api/v1/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  salesforce_network:
    driver: bridge
